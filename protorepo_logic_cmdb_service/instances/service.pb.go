// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package instances

import (
	context "context"
	fmt "fmt"
	giraffe_micro "github.com/easyops-cn/giraffe-micro"
	_ "github.com/easyops-cn/protobuf/giraffeproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xcc, 0x2b, 0x2e, 0x49,
	0xcc, 0x4b, 0x4e, 0x2d, 0x96, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x87, 0xca, 0x48, 0x59,
	0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0x26, 0x16, 0x57, 0xe6,
	0x17, 0x14, 0xeb, 0x26, 0xe7, 0xe9, 0x83, 0x25, 0x93, 0x4a, 0xd3, 0xf4, 0xd3, 0x33, 0x8b, 0x12,
	0xd3, 0xd2, 0x52, 0xc1, 0x7c, 0x18, 0x07, 0xaa, 0x55, 0x26, 0x3d, 0x3f, 0x3f, 0x3d, 0x27, 0x15,
	0xa1, 0xb6, 0xb8, 0xa4, 0xa8, 0x34, 0xb9, 0x04, 0x2a, 0x2b, 0x8d, 0x2e, 0x9b, 0x9a, 0x5b, 0x50,
	0x52, 0x09, 0x91, 0x34, 0xba, 0xc0, 0xcc, 0xc5, 0x5c, 0x54, 0x90, 0x2c, 0x34, 0x8d, 0x91, 0x8b,
	0xdb, 0x3d, 0xb5, 0xc4, 0x13, 0xea, 0x3a, 0x21, 0x51, 0x3d, 0xb8, 0x43, 0xf5, 0x60, 0x82, 0x9e,
	0x2e, 0x52, 0xe2, 0x7a, 0x10, 0xc3, 0xf4, 0x60, 0x86, 0xe9, 0x05, 0x83, 0xad, 0x52, 0x0a, 0x3f,
	0xb4, 0xf4, 0xc9, 0x64, 0x26, 0x45, 0x2e, 0x49, 0x7d, 0x98, 0x3e, 0xbd, 0xa2, 0x82, 0x64, 0x7d,
	0x64, 0x23, 0x59, 0xc2, 0x0c, 0xf5, 0x0c, 0x9a, 0x2e, 0x3f, 0x99, 0xcc, 0xa4, 0x25, 0xa4, 0xa1,
	0x9f, 0x9f, 0x94, 0x95, 0x9a, 0x5c, 0xa2, 0x6f, 0x05, 0xa1, 0xe3, 0x33, 0x53, 0xe0, 0x1a, 0xf5,
	0xad, 0x60, 0xac, 0xf8, 0xcc, 0x14, 0xa1, 0x89, 0x8c, 0x5c, 0x7c, 0xce, 0x45, 0xa9, 0x89, 0x25,
	0xa9, 0x70, 0x83, 0x84, 0xb1, 0xb8, 0x4d, 0x0a, 0xbb, 0x83, 0x95, 0x82, 0xc1, 0xee, 0x52, 0xe1,
	0x92, 0x41, 0x75, 0x17, 0x9a, 0x89, 0x08, 0xa7, 0x29, 0x2b, 0x49, 0xe3, 0x71, 0x9a, 0x15, 0x4b,
	0x4a, 0x62, 0x49, 0xa2, 0xd0, 0x6c, 0x46, 0x2e, 0x3e, 0x97, 0xd4, 0x9c, 0x54, 0x24, 0x13, 0x70,
	0x84, 0x97, 0x18, 0x46, 0x78, 0xb9, 0x82, 0x02, 0x5f, 0x29, 0x0a, 0xbb, 0xb3, 0xd0, 0x0c, 0x45,
	0x0a, 0x31, 0x2d, 0xa2, 0x43, 0xcc, 0x89, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18,
	0x1f, 0x3c, 0x92, 0x63, 0x4c, 0x62, 0x03, 0xdb, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x36,
	0xb5, 0x07, 0x3e, 0x88, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = io.EOF
var _ context.Context
var _ giraffe_micro.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = giraffe_micro.SupportPackageIsVersion3 // please upgrade the giraffe_micro package

// Client is the client API for instances service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Client interface {
	GetInstance(ctx context.Context, in *InstanceID) (*types.Struct, error)
	CreateInstance(ctx context.Context, in *Instance) (*InstanceID, error)
	DeleteInstance(ctx context.Context, in *InstanceID) (*types.Empty, error)
}

type client struct {
	c giraffe_micro.Client
}

func NewClient(c giraffe_micro.Client) Client {
	return &client{
		c: c,
	}
}

func (c *client) GetInstance(ctx context.Context, in *InstanceID) (*types.Struct, error) {
	out := new(types.Struct)
	err := c.c.Invoke(ctx, _GetInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) CreateInstance(ctx context.Context, in *Instance) (*InstanceID, error) {
	out := new(InstanceID)
	err := c.c.Invoke(ctx, _CreateInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteInstance(ctx context.Context, in *InstanceID) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.c.Invoke(ctx, _DeleteInstanceContract, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service is the server API for instances service.
type Service interface {
	GetInstance(context.Context, *InstanceID) (*types.Struct, error)
	CreateInstance(context.Context, *Instance) (*InstanceID, error)
	DeleteInstance(context.Context, *InstanceID) (*types.Empty, error)
}

func _GetInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetInstance(ctx, req.(*InstanceID))
	}
}

func _CreateInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateInstance(ctx, req.(*Instance))
	}
}

func _DeleteInstanceEndpoint(s Service) giraffe_micro.UnaryEndpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteInstance(ctx, req.(*InstanceID))
	}
}

func RegisterService(s giraffe_micro.Server, srv Service) {
	s.RegisterUnaryEndpoint(_GetInstanceContract, _GetInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_CreateInstanceContract, _CreateInstanceEndpoint(srv))
	s.RegisterUnaryEndpoint(_DeleteInstanceContract, _DeleteInstanceEndpoint(srv))
}

// API Contract
var _GetInstanceContract = &getInstanceContract{}

type getInstanceContract struct{}

func (*getInstanceContract) ServiceName() string          { return "instances.rpc" }
func (*getInstanceContract) MethodName() string           { return "GetInstance" }
func (*getInstanceContract) RequestMessage() interface{}  { return new(InstanceID) }
func (*getInstanceContract) ResponseMessage() interface{} { return new(InstanceID) }
func (*getInstanceContract) ContractName() string         { return "/instance.rpc/GetInstance" }
func (*getInstanceContract) ContractVersion() string      { return "V1.0" }
func (*getInstanceContract) Pattern() (string, string) {
	return "GET", "/object/:object_id/instance/:instance_id"
}
func (*getInstanceContract) Body() string { return "" }

var _CreateInstanceContract = &createInstanceContract{}

type createInstanceContract struct{}

func (*createInstanceContract) ServiceName() string          { return "instances.rpc" }
func (*createInstanceContract) MethodName() string           { return "CreateInstance" }
func (*createInstanceContract) RequestMessage() interface{}  { return new(Instance) }
func (*createInstanceContract) ResponseMessage() interface{} { return new(Instance) }
func (*createInstanceContract) ContractName() string         { return "/instance.rpc/CreateInstance" }
func (*createInstanceContract) ContractVersion() string      { return "V1.0" }
func (*createInstanceContract) Pattern() (string, string) {
	return "POST", "/object/:object_id/instance"
}
func (*createInstanceContract) Body() string { return "data" }

var _DeleteInstanceContract = &deleteInstanceContract{}

type deleteInstanceContract struct{}

func (*deleteInstanceContract) ServiceName() string          { return "instances.rpc" }
func (*deleteInstanceContract) MethodName() string           { return "DeleteInstance" }
func (*deleteInstanceContract) RequestMessage() interface{}  { return new(InstanceID) }
func (*deleteInstanceContract) ResponseMessage() interface{} { return new(InstanceID) }
func (*deleteInstanceContract) ContractName() string         { return "/instance.rpc/DeleteInstance" }
func (*deleteInstanceContract) ContractVersion() string      { return "V1.0" }
func (*deleteInstanceContract) Pattern() (string, string) {
	return "DELETE", "/object/:object_id/instance/:instance_id"
}
func (*deleteInstanceContract) Body() string { return "" }
